{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst config = {\n  apiKey: \"AIzaSyCFTwY-2oqim2IdfZBl_QY0y8X8pEz2E_s\",\n  authDomain: \"drews-shop.firebaseapp.com\",\n  databaseURL: \"https://drews-shop.firebaseio.com\",\n  projectId: \"drews-shop\",\n  storageBucket: \"drews-shop.appspot.com\",\n  messagingSenderId: \"1074770037030\",\n  appId: \"1:1074770037030:web:d7afebfc4e8888c2bdd9e7\",\n  measurementId: \"G-HRBE0TN510\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        email,\n        displayName,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user ', err.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const refObj = collectionRef.doc();\n    batch.set(refObj, obj);\n  });\n  return await batch.commit();\n};\nconst provider = new firebase.auth.GoogleAuthProvider(); // always want to trigger google pop up whenever we use\n// this google auth provider for sign in\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/ecommerce/drews-shop/src/firebase/firebase.utils.js"],"names":["firebase","auth","firestore","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","refObj","commit","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,OAAO,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAIF,QAAQ,CAACE,SAAT,EAAnB;AAEP,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,4BAFD;AAGXC,EAAAA,WAAW,EAAE,mCAHF;AAIXC,EAAAA,SAAS,EAAE,YAJA;AAKXC,EAAAA,aAAa,EAAE,wBALJ;AAMXC,EAAAA,iBAAiB,EAAE,eANR;AAOXC,EAAAA,KAAK,EAAE,4CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWEX,QAAQ,CAACY,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGd,SAAS,CAACe,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBT,QAA7B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACD,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBH,QAAAA,KADgB;AAEhBD,QAAAA,WAFgB;AAGhBE,QAAAA,SAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAQA,OAAMY,GAAN,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAAG,CAACG,OAAxC;AACD;AACF;;AACD,SAAOd,OAAP;AACD,CAxBE;AA0BT,OAAO,MAAMe,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAsC;AAC3E,QAAMC,aAAa,GAAGhC,SAAS,CAACiC,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACA,QAAME,KAAK,GAAGlC,SAAS,CAACkC,KAAV,EAAd;AAEAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAG;AACzB,UAAMC,MAAM,GAAGL,aAAa,CAACjB,GAAd,EAAf;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,MAAV,EAAiBD,GAAjB;AACD,GAHD;AAIA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACH,CAVM;AAaL,MAAMC,QAAQ,GAAG,IAAIzC,QAAQ,CAACC,IAAT,CAAcyC,kBAAlB,EAAjB,C,CACA;AACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAC;AAAR,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM5C,IAAI,CAAC6C,eAAL,CAAqBL,QAArB,CAA/B","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nexport const auth = firebase.auth();\nexport const firestore  = firebase.firestore();\n\nconst config = {\n    apiKey: \"AIzaSyCFTwY-2oqim2IdfZBl_QY0y8X8pEz2E_s\",\n    authDomain: \"drews-shop.firebaseapp.com\",\n    databaseURL: \"https://drews-shop.firebaseio.com\",\n    projectId: \"drews-shop\",\n    storageBucket: \"drews-shop.appspot.com\",\n    messagingSenderId: \"1074770037030\",\n    appId: \"1:1074770037030:web:d7afebfc4e8888c2bdd9e7\",\n    measurementId: \"G-HRBE0TN510\"\n  }\n\n  firebase.initializeApp(config);\n\n  export const createUserProfileDocument = async (userAuth, additionalData) =>{\n      if(!userAuth) return;\n      \n      const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n      const snapShot = await userRef.get();\n\n      if(!snapShot.exists){\n          const {displayName, email} = userAuth;\n          const createdAt = new Date();\n\n          try{\n            await userRef.set({\n              email,\n              displayName,\n              createdAt,\n              ...additionalData\n            })\n          }\n          catch(err){\n            console.log('error creating user ', err.message)\n          }\n        }\n        return userRef;\n      }\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) =>{\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef)\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(obj =>{\n      const refObj = collectionRef.doc()\n      batch.set(refObj,obj)\n    })\n    return await batch.commit()\n}\n\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n  // always want to trigger google pop up whenever we use\n  // this google auth provider for sign in\n  provider.setCustomParameters({prompt:'select_account'})\n\n  export const signInWithGoogle = () => auth.signInWithPopup(provider)"]},"metadata":{},"sourceType":"module"}