{"ast":null,"code":"// moving fetchCollectionsStartAsync to this file\nimport { takeEvery, call, put } from 'redux-saga/effects'; // takeEvery\n// creates non blocking call in order to create other sagas\n// can cancel tasks coming from \n// call\n// the code inside the generator function that invokes the method\n// put\n// saga effect for creating actions\n// dispatches action\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('fetchCollectionsStartAsync has run');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (err) {\n    yield put(fetchCollectionsFailure(err.message));\n  } // collectionRef.get().then(\n  //  snapshot =>{\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  // })\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/ecommerce/drews-shop/src/redux/shop/shop.saga.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","err","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA;AAEA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,+BAAxD;AACA,SAAQC,uBAAR,EAAgCC,uBAAhC,QAA8D,gBAA9D;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,oCAAZ,CAAN;;AAEA,MAAG;AACH,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACG,+BAAD,EAAiCS,QAAjC,CAAjC;AACI,UAAMX,GAAG,CAACG,uBAAuB,CAACU,cAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAMC,GAAN,EAAU;AACR,UAAMd,GAAG,CAACI,uBAAuB,CAACU,GAAG,CAACC,OAAL,CAAxB,CAAT;AACH,GAVmC,CAWpC;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMlB,SAAS,CAACO,eAAe,CAACY,uBAAjB,EAAyCX,qBAAzC,CAAf;AACH","sourcesContent":["// moving fetchCollectionsStartAsync to this file\n\nimport {takeEvery, call, put} from 'redux-saga/effects'\n// takeEvery\n// creates non blocking call in order to create other sagas\n// can cancel tasks coming from \n// call\n// the code inside the generator function that invokes the method\n// put\n// saga effect for creating actions\n// dispatches action\nimport {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\nimport {fetchCollectionsSuccess,fetchCollectionsFailure} from './shop.actions'\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync(){\n    yield console.log('fetchCollectionsStartAsync has run')\n\n    try{\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot)\n        yield put(fetchCollectionsSuccess(collectionsMap))\n    } catch(err){\n        yield put(fetchCollectionsFailure(err.message))\n    }\n    // collectionRef.get().then(\n    //  snapshot =>{\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap));\n    // })\n}\n\nexport function* fetchCollectionsStart(){\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START,fetchCollectionsAsync)\n}"]},"metadata":{},"sourceType":"module"}